// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
	CreateNoteApiNotesPostData,
	CreateNoteApiNotesPostErrors,
	CreateNoteApiNotesPostResponses,
	DeleteNoteApiNotesNoteIdDeleteData,
	DeleteNoteApiNotesNoteIdDeleteErrors,
	DeleteNoteApiNotesNoteIdDeleteResponses,
	GetNotesApiNotesGetData,
	GetNotesApiNotesGetResponses,
	HealthCheckHealthGetData,
	HealthCheckHealthGetResponses,
	RootGetData,
	RootGetResponses,
	UpdateNoteApiNotesNoteIdPutData,
	UpdateNoteApiNotesNoteIdPutErrors,
	UpdateNoteApiNotesNoteIdPutResponses,
} from "./types.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get Notes
 * Retrieve all notes.
 */
export const getNotesApiNotesGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetNotesApiNotesGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetNotesApiNotesGetResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api/notes/",
		...options,
	});
};

/**
 * Create Note
 * Create a new note.
 */
export const createNoteApiNotesPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateNoteApiNotesPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateNoteApiNotesPostResponses,
		CreateNoteApiNotesPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api/notes/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Delete Note
 * Delete a note.
 */
export const deleteNoteApiNotesNoteIdDelete = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DeleteNoteApiNotesNoteIdDeleteData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteNoteApiNotesNoteIdDeleteResponses,
		DeleteNoteApiNotesNoteIdDeleteErrors,
		ThrowOnError
	>({
		url: "/api/notes/{note_id}",
		...options,
	});
};

/**
 * Update Note
 * Update an existing note.
 */
export const updateNoteApiNotesNoteIdPut = <
	ThrowOnError extends boolean = false,
>(
	options: Options<UpdateNoteApiNotesNoteIdPutData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateNoteApiNotesNoteIdPutResponses,
		UpdateNoteApiNotesNoteIdPutErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api/notes/{note_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Root
 * Root endpoint with API information.
 */
export const rootGet = <ThrowOnError extends boolean = false>(
	options?: Options<RootGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		RootGetResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/",
		...options,
	});
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(
	options?: Options<HealthCheckHealthGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		HealthCheckHealthGetResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/health",
		...options,
	});
};
